
/*
Main Program rev 3

copyright (c) SkillIssue, 2025
licensed under CC-BY-NC-4.0
*/

#include <chrono>
#include <cstdint>
#include <json-c/json.h>
#include <mutex>
#include <string>
#include <thread>
#include <tuple>
#include <vector>

using namespace std;

// OpenCV
#include <opencv2/core.hpp>
#include <opencv2/core/types.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/opencv.hpp>

#include "globals.hpp"

bool in_room = false;

int main() {
  // Initialize Systems
  init();

  // TODO wait for button press

  cv::VideoCapture cam = cv::VideoCapture(2);
  loop {
    cv::Mat frame;
    cam.read(frame); // get newest frame
    cv::Mat test[3] = {};
    cv::split(frame, test);
    cv::Mat schrott = 2 * test[2] - test[1] - test[0];
    // cv::Mat schrott = test[2] - 0.5 * test[1] - 0.5 * test[0];
    // cv::Mat schrott2 = 2 * test[1] - test[2] - test[0];
    // edge
    // cv::cvtColor(schrott, schrott, cv::COLOR_BGR2GRAY);
    cv::GaussianBlur(schrott, schrott, cv::Size(3, 3), 2);
    cv::Mat schrotttie;
    cv::Canny(schrott, schrotttie, 75, 100, 3, false);
    vector<cv::Vec2f> lines;
    cv::HoughLines(schrotttie, lines, 1, CV_PI / 180, 150, 0, 0);
    cv::Mat hallo;
    for (auto elem : lines) {
    }

#ifdef DEBUG
    cv::imshow("frame", frame);
    cv::imshow("test0", test[0]);
    cv::imshow("test1", test[1]);
    cv::imshow("test2", test[2]);
    cv::imshow("schrott", schrott);
    // cv::imshow("schrott2", schrott2);
    cv::imshow("schrotttie", schrotttie);
#endif

    char c;
    if ((c = cv::waitKey(5)) > 0) {
      break;
    }
  }

  cam.release();
  cv::destroyAllWindows();

#ifndef DEBUG
  // of.close();
#endif
  return _PROGRAM_END;
}
